user nginx;
worker_processes 1;

events {
    worker_connections 1024;
}

http {
    # Custom structured access log that records upstream headers and timings
    log_format svc_log '$remote_addr - $remote_user [$time_local] "$request" '
                       'status=$status pool=$upstream_http_x_app_pool release=$upstream_http_x_release_id '
                       'upstream_status=$upstream_status upstream_addr=$upstream_addr '
                       'request_time=$request_time upstream_response_time=$upstream_response_time '
                       'ua="$http_user_agent"';

    access_log /var/log/nginx/access.log svc_log;

    upstream node_app {
        server app_blue:${PORT} max_fails=1 fail_timeout=3s;
        server app_green:${PORT} backup;
        keepalive 32;
    }

    server {
        listen 80;

        location / {
            proxy_pass http://node_app;

            # Retry policy and tight timeouts
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_connect_timeout 3s;
            proxy_send_timeout 3s;
            proxy_read_timeout 3s;
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Forward request headers; do not strip app headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # health and version proxied the same
        location /healthz {
            proxy_pass http://node_app/healthz;
        }

        location /version {
            proxy_pass http://node_app/version;
        }
    }
}
