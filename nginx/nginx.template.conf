user nginx;
worker_processes 1;

events {
    worker_connections 1024;
}

http {
    # upstreams: primary + backup
    upstream node_app {
        server app_blue:${PORT} max_fails=1 fail_timeout=3s;
        server app_green:${PORT} backup;
        keepalive 32;
    }

    # --- custom log format: captures pool, release, upstream status, addr, timings
    log_format structured '$remote_addr - $remote_user [$time_local] '
        '"$request" $status $body_bytes_sent '
        'pool="$upstream_http_x_app_pool|$http_x_app_pool" '
        'release="$upstream_http_x_release_id|$http_x_release_id" '
        'upstream_status="$upstream_status" upstream_addr="$upstream_addr" '
        'request_time="$request_time" upstream_response_time="$upstream_response_time" '
        'referrer="$http_referer" ua="$http_user_agent"';

    access_log /var/log/nginx/structured_access.log structured;
    error_log /var/log/nginx/error.log warn;

    server {
        listen 80;

        location / {
            # forward to upstream pool
            proxy_pass http://node_app;

            # upstream behaviour
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_connect_timeout 3s;
            proxy_send_timeout 3s;
            proxy_read_timeout 3s;

            # preserve host and forward headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # Let upstream include response headers like X-App-Pool and X-Release-Id.
            # We log them via $upstream_http_x_app_pool and $upstream_http_x_release_id.
        }
    }
}